<?xml version="1.0"?>
<launch>
  <!-- 1. Виртуальное время -->
  <param name="use_sim_time" value="true"/>

  <!-- 2. MAVROS SITL -->
  <include file="$(find mavros)/launch/apm.launch">
    <arg name="fcu_url" value="udp://:14550@127.0.0.1:14557"/>
  </include>

  <!-- 3. Загрузка URDF -->
  <param name="robot_description" command="$(find xacro)/xacro '$(find basic_nav)/urdf/drone_urdf.urdf'"/>
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="state_publisher" output="screen">
    <param name="publish_frequency" value="20.0"/>
  </node>

  <!-- 4. Исправление карты с центром в (0,0) -->
  <node pkg="basic_nav" type="fix_map.py" name="map_fixer" output="screen">
    <param name="use_fixed_origin" value="true"/>
    <!-- Устанавливаем начало карты в (-100, -100), чтобы точка (0, 0) была в центре карты -->
    <param name="origin_x" value="-100.0"/>
    <param name="origin_y" value="-100.0"/>
    <param name="map_size" value="200.0"/>
  </node>
  
  <!-- 5. Загрузка карты -->
  <node pkg="map_server" type="map_server" name="map_server"
        args="$(find basic_nav)/maps/my_map.yaml"/>
        
  <!-- 6. Перенаправление топиков карты -->
  <node pkg="topic_tools" type="relay" name="map_relay"
        args="/fixed_map /map" />

  <!-- 7. Статический трансформ map -> odom -->
  <node pkg="tf" type="static_transform_publisher" name="static_map_to_odom"
        args="0 0 0 0 0 0 map odom 100" />

  <!-- 8. Статический трансформ odom -> base_link (временно для инициализации) -->
  <node pkg="tf" type="static_transform_publisher" name="initial_pose_tf"
        args="0.0 0.0 0 0 0 0 odom base_link 100" />
        
  <!-- 9. Статический трансформ base_link -> lidar_link -->
  <node pkg="tf" type="static_transform_publisher" name="base_to_lidar"
        args="0 0 0.2 0 0 0 base_link lidar_link 100" />

  <!-- 10. Ретрансляция лидара -->
  <node pkg="topic_tools" type="relay" name="scan_relay"
        args="/drone1/scan /scan" output="screen">
    <param name="queue_size" value="20"/>
    <param name="unreliable" value="true"/>
  </node>

  <!-- 11. Move Base с простыми параметрами и явно установленным центром в (0,0) -->
  <node pkg="move_base" type="move_base" name="move_base" output="screen" respawn="true">
    <!-- Параметры карт стоимости прямо в launch-файле -->
    <rosparam>
      global_costmap:
        global_frame: map
        robot_base_frame: base_link
        update_frequency: 5.0
        publish_frequency: 2.0
        static_map: true
        transform_tolerance: 5.0
        width: 200.0
        height: 200.0
        origin_x: -100.0
        origin_y: -100.0
        resolution: 0.05
        plugins:
          - {name: static_layer, type: "costmap_2d::StaticLayer"}
          - {name: obstacle_layer, type: "costmap_2d::ObstacleLayer"}
          - {name: inflation_layer, type: "costmap_2d::InflationLayer"}
      
      local_costmap:
        global_frame: odom
        robot_base_frame: base_link
        update_frequency: 10.0
        publish_frequency: 5.0
        static_map: false
        rolling_window: true
        width: 5.0
        height: 5.0
        resolution: 0.05
        transform_tolerance: 5.0
        origin_x: -2.5
        origin_y: -2.5
        plugins:
          - {name: obstacle_layer, type: "costmap_2d::ObstacleLayer"}
          - {name: inflation_layer, type: "costmap_2d::InflationLayer"}
      
      static_layer:
        map_topic: /map
        subscribe_to_updates: true
        
      obstacle_layer:
        observation_sources: scan
        scan:
          data_type: LaserScan
          topic: /scan
          sensor_frame: lidar_link
          marking: true
          clearing: true
          obstacle_range: 10.0
          raytrace_range: 15.0
      
      inflation_layer:
        inflation_radius: 1.0
        cost_scaling_factor: 5.0
        
      # Определяем доступные recovery behaviors
      recovery_behaviors:
        - name: 'conservative_reset'
          type: 'clear_costmap_recovery/ClearCostmapRecovery'
        - name: 'rotate_recovery'
          type: 'rotate_recovery/RotateRecovery'
    </rosparam>
    
    <param name="planner_frequency" value="5.0"/>
    <param name="controller_frequency" value="15.0"/>
    <param name="base_global_planner" value="navfn/NavfnROS"/>
    <param name="base_local_planner" value="base_local_planner/TrajectoryPlannerROS"/>
    <param name="recovery_behavior_enabled" value="true"/>
    <param name="clearing_rotation_allowed" value="true"/>
    <remap from="cmd_vel" to="/cmd_vel"/>
  </node>

  <!-- 12. Отладчик карты стоимости с центром в (0,0) -->
  <node name="debug_costmap" pkg="basic_nav" type="debug_costmap.py" output="screen">
    <param name="map_center_x" value="0.0"/>
    <param name="map_center_y" value="0.0"/>
  </node>

  <!-- 13. Контроллер взлета и посадки дрона -->
  <node name="arm_takeoff" pkg="basic_nav" type="arm_takeoff.py" output="screen">
    <param name="takeoff_height" value="2.0"/>
    <param name="arm_timeout" value="60.0"/>
  </node>

  <!-- 14. RViz для визуализации -->
  <node pkg="rviz" type="rviz" name="rviz"
        args="-d $(find basic_nav)/rviz/drone_navigation.rviz"/>
</launch> 